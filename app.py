# app.py - Aplicaci√≥n Streamlit m√≠nima para integraci√≥n con Colab
import streamlit as st
import pandas as pd
import json
import os
import uuid
import time
from datetime import datetime
import matplotlib.pyplot as plt

# T√≠tulo y configuraci√≥n
st.set_page_config(
    page_title="Test Streamlit-Colab",
    page_icon="üîÑ",
    layout="wide"
)

st.title("Prueba de integraci√≥n Streamlit-Colab")
st.subheader("Un ejemplo super simple")

# Definir rutas locales (simular Drive)
# En producci√≥n, estas carpetas deber√≠an estar en Google Drive
BASE_DIR = "streamlit_colab_test"
INPUT_DIR = os.path.join(BASE_DIR, "input")
OUTPUT_DIR = os.path.join(BASE_DIR, "output")

# Crear carpetas si no existen
os.makedirs(INPUT_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Funci√≥n para guardar un n√∫mero para ser procesado por Colab
def enviar_a_colab(numero):
    """Guarda un n√∫mero en un archivo para que Colab lo procese"""
    # Crear ID √∫nico
    id_tarea = str(uuid.uuid4())
    
    # Crear un diccionario con los datos
    datos = {
        "id": id_tarea,
        "numero": numero,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # Guardar en archivo
    ruta_archivo = os.path.join(INPUT_DIR, f"{id_tarea}.json")
    with open(ruta_archivo, 'w') as f:
        json.dump(datos, f, indent=2)
    
    return id_tarea

# Funci√≥n para verificar si Colab ha procesado un n√∫mero
def verificar_resultado(id_tarea):
    """Verifica si hay resultados disponibles para el ID dado"""
    ruta_resultado = os.path.join(OUTPUT_DIR, f"{id_tarea}_resultado.json")
    
    if os.path.exists(ruta_resultado):
        with open(ruta_resultado, 'r') as f:
            return json.load(f)
    
    return None

# Inicializar el estado de la sesi√≥n si es necesario
if "tareas" not in st.session_state:
    st.session_state.tareas = []

# Panel lateral con instrucciones
st.sidebar.header("Instrucciones")
st.sidebar.markdown("""
1. Ingresa un n√∫mero y haz clic en "Procesar en Colab"
2. La aplicaci√≥n guardar√° el n√∫mero en un archivo JSON
3. Ejecuta el notebook de Colab para procesar el n√∫mero
4. Regresa aqu√≠ y haz clic en "Verificar resultados"
5. ¬°Ver√°s los resultados procesados por Colab!
""")

st.sidebar.markdown("---")

# Si est√°s en modo local, mostrar la ubicaci√≥n de los archivos
st.sidebar.subheader("Ubicaci√≥n de archivos")
st.sidebar.code(f"Input: {os.path.abspath(INPUT_DIR)}")
st.sidebar.code(f"Output: {os.path.abspath(OUTPUT_DIR)}")

st.sidebar.markdown("---")
st.sidebar.info("Esta es una demostraci√≥n m√≠nima de integraci√≥n Streamlit-Colab.")

# Formulario para ingresar un n√∫mero
st.header("Ingresa un n√∫mero para procesar en Colab")

with st.form("form_numero"):
    numero = st.number_input("N√∫mero", min_value=1, max_value=100, value=42)
    submitted = st.form_submit_button("Procesar en Colab")
    
    if submitted:
        with st.spinner("Enviando n√∫mero a Colab..."):
            # Simulamos un peque√±o retraso
            time.sleep(0.5)
            
            # Enviamos el n√∫mero
            id_tarea = enviar_a_colab(numero)
            
            # Guardamos la tarea en el estado
            st.session_state.tareas.append({
                "id": id_tarea,
                "numero": numero,
                "timestamp": datetime.now(),
                "estado": "pendiente"
            })
            
            st.success(f"¬°N√∫mero enviado! ID de tarea: {id_tarea}")
            st.info("Ahora ejecuta el notebook de Colab para procesar este n√∫mero.")

# Mostrar tareas y resultados
if st.session_state.tareas:
    st.header("Tareas enviadas a Colab")
    
    for i, tarea in enumerate(st.session_state.tareas):
        with st.expander(f"Tarea {i+1}: N√∫mero {tarea['numero']} - {tarea['estado'].capitalize()}", expanded=(i==0)):
            st.write(f"ID de tarea: {tarea['id']}")
            st.write(f"Enviada: {tarea['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Bot√≥n para verificar el resultado
            if st.button(f"Verificar resultado #{i+1}"):
                resultado = verificar_resultado(tarea['id'])
                
                if resultado:
                    # Actualizar estado
                    st.session_state.tareas[i]['estado'] = "completado"
                    st.session_state.tareas[i]['resultado'] = resultado
                    
                    # Mostrar el resultado
                    st.success("¬°Resultado procesado por Colab!")
                    
                    # Crear una tabla con los resultados
                    df = pd.DataFrame({
                        'M√©trica': [
                            'N√∫mero original',
                            'Cuadrado',
                            'Ra√≠z cuadrada',
                            'Doble',
                            'Mitad'
                        ],
                        'Valor': [
                            resultado['numero_original'],
                            resultado['cuadrado'],
                            resultado['raiz_cuadrada'],
                            resultado['doble'],
                            resultado['mitad']
                        ]
                    })
                    
                    st.dataframe(df)
                    
                    # Mostrar un gr√°fico simple
                    fig, ax = plt.subplots()
                    ax.bar(['Original', 'Cuadrado', 'Doble', 'Mitad'], 
                          [resultado['numero_original'], 
                           resultado['cuadrado'], 
                           resultado['doble'], 
                           resultado['mitad']])
                    ax.set_title(f"Operaciones con el n√∫mero {resultado['numero_original']}")
                    st.pyplot(fig)
                    
                    # Informaci√≥n adicional
                    st.info(f"Procesado por: {resultado['procesado_por']}")
                    st.text(f"Timestamp: {resultado['timestamp']}")
                    
                else:
                    st.warning("A√∫n no hay resultados disponibles.")
                    st.info("Ejecuta el notebook de Colab para procesar este n√∫mero.")
            
            # Si ya tenemos el resultado, mostrarlo
            if tarea.get('estado') == "completado" and 'resultado' in tarea:
                resultado = tarea['resultado']
                
                st.success("¬°Resultado procesado por Colab!")
                
                # Crear una tabla con los resultados
                df = pd.DataFrame({
                    'M√©trica': [
                        'N√∫mero original',
                        'Cuadrado',
                        'Ra√≠z cuadrada',
                        'Doble',
                        'Mitad'
                    ],
                    'Valor': [
                        resultado['numero_original'],
                        resultado['cuadrado'],
                        resultado['raiz_cuadrada'],
                        resultado['doble'],
                        resultado['mitad']
                    ]
                })
                
                st.dataframe(df)
                
                # Mostrar un gr√°fico simple
                fig, ax = plt.subplots()
                ax.bar(['Original', 'Cuadrado', 'Doble', 'Mitad'], 
                      [resultado['numero_original'], 
                       resultado['cuadrado'], 
                       resultado['doble'], 
                       resultado['mitad']])
                ax.set_title(f"Operaciones con el n√∫mero {resultado['numero_original']}")
                st.pyplot(fig)
                
                # Informaci√≥n adicional
                st.info(f"Procesado por: {resultado['procesado_por']}")
                st.text(f"Timestamp: {resultado['timestamp']}")
else:
    st.info("No hay tareas enviadas. Ingresa un n√∫mero y haz clic en 'Procesar en Colab'.")
